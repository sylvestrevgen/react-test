{"version":3,"sources":["pages/SinglePostPage/singlePostPage.module.css","components/SinglePost/singlePost.module.css","components/SinglePost/CommentsList/commentsList.module.css","components/SinglePost/CommentsList/CommentsListItem/commentsListItem.module.css","components/CommentEditor/commentEditor.module.css","components/SinglePost/CommentsList/CommentsListItem/CommentsListItem.jsx","components/SinglePost/CommentsList/CommentsList.jsx","components/CommentEditor/CommentEditor.jsx","components/SinglePost/SinglePost.jsx","pages/SinglePostPage/SinglePostPage.jsx","pages/SinglePostPage/SinglePostPageContainer.js","components/Button/Button.jsx","redux/operations.js","redux/actions.js","components/PostEditor/PostEditor.jsx","components/PostEditor/postEditor.module.css","components/Button/button.module.css"],"names":["module","exports","CommentsListItem","body","className","styles","comment","title","defaultProps","CommentsList","comments","listWrap","length","InfoText","label","list","map","key","id","CommentEditor","state","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","match","onAddComment","toast","error","params","this","form","onSubmit","type","onChange","input","Button","Component","withRouter","SinglePost","post","connect","dispatch","postId","addComment","SinglePostPage","isEditing","handleReturnClick","history","push","handleToggleEditPost","handleUpdatePost","onUpdatePost","onFetchSinglePost","isLoading","postPage","buttons","onClick","customStyles","marginBottom","PostEditor","onSave","LoadingSpinner","selectors","fetchSinglePost","updatePost","button","style","fetchPosts","actionTypes","FETCH_POSTS_START","axios","get","then","response","posts","data","FETCH_POSTS_SUCCESS","payload","catch","FETCH_POSTS_ERROR","fetchPostsError","FETCH_SINGLE_POST_START","singlePost","FETCH_SINGLE_POST_SUCCESS","FETCH_SINGLE_POST_ERROR","fetchSinglePostError","deletePost","DELETE_POST_START","delete","DELETE_POST_SUCCESS","deletePostSuccess","success","DELETE_POST_ERROR","addPost","ADD_POST_START","ADD_POST_SUCCESS","addPostSuccess","ADD_POST_ERROR","addPostError","UPDATE_POST_START","put","UPDATE_POST_SUCCESS","updatePostSuccess","UPDATE_POST_ERROR","updatePostError","commentBody","ADD_COMMENT_START","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","addCommentError","name","placeholder"],"mappings":"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","file":"static/js/single-post-page.a9b4a010.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postPage\":\"singlePostPage_postPage__b8CX4\",\"buttons\":\"singlePostPage_buttons__2NRhy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"singlePost_post__1eFg8\",\"title\":\"singlePost_title__3AYj0\",\"body\":\"singlePost_body__3PGlU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"commentsList_title__jzavq\",\"listWrap\":\"commentsList_listWrap__2HoGL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"commentsListItem_comment__13n5H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"commentEditor_form__-19yO\",\"input\":\"commentEditor_input__ty2Py\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './commentsListItem.module.css';\n\nconst CommentsListItem = ({ body }) => (\n  <div className={styles.comment}>\n    <p className={styles.title}>{body}</p>\n  </div>\n);\n\nCommentsListItem.defaultProps = {\n  body: '',\n};\n\nCommentsListItem.propTypes = {\n  body: PropTypes.string,\n};\n\nexport default CommentsListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './commentsList.module.css';\nimport CommentsListItem from './CommentsListItem/CommentsListItem';\nimport InfoText from '../../InfoText/InfoText';\n\nconst CommentsList = ({ comments }) => (\n  <div className={styles.listWrap}>\n    <h3 className={styles.title}>Comments:</h3>\n    {comments.length === 0 ? (\n      <InfoText label=\"There are no comments for this post yet.\" />\n    ) : (\n      <ul className={styles.list}>\n        {comments.map(comment => (\n          <li key={comment.id}>\n            <CommentsListItem body={comment.body} />\n          </li>\n        ))}\n      </ul>\n    )}\n  </div>\n);\n\nCommentsList.defaultProps = {\n  comments: [],\n};\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ),\n};\n\nexport default CommentsList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { withRouter } from 'react-router-dom';\nimport styles from './commentEditor.module.css';\nimport Button from '../Button/Button';\n\nclass CommentEditor extends Component {\n  state = {\n    body: '',\n  };\n\n  handleChange = event => {\n    this.setState({\n      body: event.target.value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const { body } = this.state;\n    const { match, onAddComment } = this.props;\n\n    if (body === '') {\n      return toast.error(\"You can't add empty comment!\");\n    }\n\n    onAddComment(match.params.id, body);\n\n    return this.setState({\n      body: '',\n    });\n  };\n\n  render() {\n    const { body } = this.state;\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          value={body}\n          onChange={this.handleChange}\n          className={styles.input}\n        />\n        <Button type=\"submit\" label=\"Add comment\" />\n      </form>\n    );\n  }\n}\n\nCommentEditor.defaultProps = {\n  onAddComment: () => null,\n};\n\nCommentEditor.propTypes = {\n  onAddComment: PropTypes.func,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default withRouter(CommentEditor);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styles from './singlePost.module.css';\nimport { addComment } from '../../redux/operations';\nimport CommentsList from './CommentsList/CommentsList';\nimport CommentEditor from '../CommentEditor/CommentEditor';\n\nconst SinglePost = ({ post, onAddComment }) => (\n  <article className={styles.post}>\n    <h2 className={styles.title}>{post.title}</h2>\n    <p className={styles.body}>{post.body}</p>\n    <CommentsList comments={post.comments} />\n    <CommentEditor onAddComment={onAddComment} />\n  </article>\n);\n\nSinglePost.defaultProps = {\n  post: {},\n  onAddComment: () => null,\n};\n\nSinglePost.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    comments: PropTypes.arrayOf(PropTypes.shape({})),\n  }),\n  onAddComment: PropTypes.func,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onAddComment: (postId, body) => dispatch(addComment(postId, body)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(SinglePost);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './singlePostPage.module.css';\nimport SinglePost from '../../components/SinglePost/SinglePost';\nimport Button from '../../components/Button/Button';\nimport PostEditor from '../../components/PostEditor/PostEditor';\nimport LoadingSpinner from '../../components/LoadingSpinner/LoadingSpinner';\n\nexport default class SinglePostPage extends Component {\n  state = {\n    isEditing: false,\n  };\n\n  componentDidMount() {\n    const { onFetchSinglePost, match } = this.props;\n\n    onFetchSinglePost(match.params.id);\n  }\n\n  handleReturnClick = () => {\n    const { history } = this.props;\n\n    history.push('/posts');\n  };\n\n  handleToggleEditPost = () => {\n    this.setState(state => ({\n      isEditing: !state.isEditing,\n    }));\n  };\n\n  handleUpdatePost = post => {\n    const { onUpdatePost, match } = this.props;\n    onUpdatePost(post, match.params.id);\n\n    this.setState({\n      isEditing: false,\n    });\n  };\n\n  render() {\n    const { post, isLoading } = this.props;\n    const { isEditing } = this.state;\n\n    return (\n      <section className={styles.postPage}>\n        <div className={styles.buttons}>\n          <Button\n            label=\"Return\"\n            onClick={this.handleReturnClick}\n            customStyles={{ marginBottom: '30px' }}\n          />\n          <Button\n            label={isEditing ? 'Cancel' : 'Edit post'}\n            customStyles={{ marginBottom: '30px' }}\n            onClick={this.handleToggleEditPost}\n          />\n        </div>\n        {isEditing && (\n          <PostEditor\n            title={post.title}\n            body={post.body}\n            onSave={this.handleUpdatePost}\n          />\n        )}\n        {isLoading ? <LoadingSpinner /> : <SinglePost post={post} />}\n      </section>\n    );\n  }\n}\n\nSinglePostPage.defaultProps = {\n  post: {},\n  isLoading: false,\n  onFetchSinglePost: () => null,\n  onUpdatePost: () => null,\n};\n\nSinglePostPage.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n  }),\n  isLoading: PropTypes.bool,\n  onFetchSinglePost: PropTypes.func,\n  onUpdatePost: PropTypes.func,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import { connect } from 'react-redux';\nimport * as selectors from '../../redux/selectors';\nimport { fetchSinglePost, updatePost } from '../../redux/operations';\nimport SinglePostPage from './SinglePostPage';\n\nconst mapStateToProps = state => ({\n  post: selectors.getSinglePost(state),\n  isLoading: selectors.isLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFetchSinglePost: id => dispatch(fetchSinglePost(id)),\n  onUpdatePost: (post, id) => dispatch(updatePost(post, id)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SinglePostPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './button.module.css';\n\nconst Button = ({ type, label, onClick, customStyles }) => (\n  <button\n    type={type}\n    onClick={onClick}\n    className={styles.button}\n    style={customStyles}\n  >\n    {label}\n  </button>\n);\n\nButton.defaultProps = {\n  label: '',\n  type: 'button',\n  customStyles: {},\n  onClick: () => null,\n};\n\nButton.propTypes = {\n  label: PropTypes.string,\n  type: PropTypes.string,\n  customStyles: PropTypes.shape({}),\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  fetchPostsStart,\n  fetchPostsSuccess,\n  fetchPostsError,\n  fetchSinglePostStart,\n  fetchSinglePostSuccess,\n  fetchSinglePostError,\n  deletePostStart,\n  deletePostSuccess,\n  deletePostError,\n  addPostStart,\n  addPostSuccess,\n  addPostError,\n  updatePostStart,\n  updatePostSuccess,\n  updatePostError,\n  addCommentStart,\n  addCommentSuccess,\n  addCommentError,\n} from './actions';\n\nexport const fetchPosts = () => dispatch => {\n  dispatch(fetchPostsStart());\n\n  axios\n    .get('https://bloggy-api.herokuapp.com/posts')\n    .then(response => dispatch(fetchPostsSuccess(response.data)))\n    .catch(error => dispatch(fetchPostsError(error)));\n};\n\nexport const fetchSinglePost = id => dispatch => {\n  dispatch(fetchSinglePostStart());\n\n  axios\n    .get(`https://bloggy-api.herokuapp.com/posts/${id}?_embed=comments`)\n    .then(response => dispatch(fetchSinglePostSuccess(response.data)))\n    .catch(error => dispatch(fetchSinglePostError(error)));\n};\n\nexport const deletePost = id => dispatch => {\n  dispatch(deletePostStart());\n\n  axios\n    .delete(`https://bloggy-api.herokuapp.com/posts/${id}`)\n    .then(() => {\n      dispatch(deletePostSuccess(id));\n      toast.success('Post deleted!');\n    })\n    .catch(error => dispatch(deletePostError(error)));\n};\n\nexport const addPost = post => dispatch => {\n  dispatch(addPostStart());\n\n  axios\n    .post('https://bloggy-api.herokuapp.com/posts', post)\n    .then(response => {\n      dispatch(addPostSuccess(response.data));\n      toast.success('Post added!');\n    })\n    .catch(error => dispatch(addPostError(error)));\n};\n\nexport const updatePost = (post, id) => dispatch => {\n  dispatch(updatePostStart());\n\n  axios\n    .put(`https://bloggy-api.herokuapp.com/posts/${id}`, post)\n    .then(response => {\n      dispatch(updatePostSuccess(response.data));\n      toast.success('Post updated!');\n    })\n    .catch(error => dispatch(updatePostError(error)));\n};\n\nexport const addComment = (id, commentBody) => dispatch => {\n  dispatch(addCommentStart());\n\n  axios\n    .post('https://bloggy-api.herokuapp.com/comments', {\n      postId: id,\n      body: commentBody,\n    })\n    .then(response => {\n      dispatch(addCommentSuccess(response.data));\n      toast.success('Comment added!');\n    })\n    .catch(error => dispatch(addCommentError(error)));\n};\n","import actionTypes from './actionTypes';\n\nexport const fetchPostsStart = () => ({\n  type: actionTypes.FETCH_POSTS_START,\n});\n\nexport const fetchPostsSuccess = posts => ({\n  type: actionTypes.FETCH_POSTS_SUCCESS,\n  payload: {\n    posts,\n  },\n});\n\nexport const fetchPostsError = error => ({\n  type: actionTypes.FETCH_POSTS_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const fetchSinglePostStart = () => ({\n  type: actionTypes.FETCH_SINGLE_POST_START,\n});\n\nexport const fetchSinglePostSuccess = singlePost => ({\n  type: actionTypes.FETCH_SINGLE_POST_SUCCESS,\n  payload: {\n    singlePost,\n  },\n});\n\nexport const fetchSinglePostError = error => ({\n  type: actionTypes.FETCH_SINGLE_POST_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const deletePostStart = () => ({\n  type: actionTypes.DELETE_POST_START,\n});\n\nexport const deletePostSuccess = id => ({\n  type: actionTypes.DELETE_POST_SUCCESS,\n  payload: {\n    id,\n  },\n});\n\nexport const deletePostError = () => ({\n  type: actionTypes.DELETE_POST_ERROR,\n});\n\nexport const addPostStart = () => ({\n  type: actionTypes.ADD_POST_START,\n});\n\nexport const addPostSuccess = post => ({\n  type: actionTypes.ADD_POST_SUCCESS,\n  payload: {\n    post,\n  },\n});\n\nexport const addPostError = error => ({\n  type: actionTypes.ADD_POST_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const updatePostStart = () => ({\n  type: actionTypes.UPDATE_POST_START,\n});\n\nexport const updatePostSuccess = post => ({\n  type: actionTypes.UPDATE_POST_SUCCESS,\n  payload: {\n    post,\n  },\n});\n\nexport const updatePostError = error => ({\n  type: actionTypes.UPDATE_POST_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const addCommentStart = () => ({\n  type: actionTypes.ADD_COMMENT_START,\n});\n\nexport const addCommentSuccess = comment => ({\n  type: actionTypes.ADD_COMMENT_SUCCESS,\n  payload: {\n    comment,\n  },\n});\n\nexport const addCommentError = error => ({\n  type: actionTypes.ADD_COMMENT_ERROR,\n  payload: {\n    error,\n  },\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport styles from './postEditor.module.css';\nimport Button from '../Button/Button';\n\nexport default class PostEditor extends Component {\n  state = {\n    title: this.props.title,\n    body: this.props.body,\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    if (this.state.title === '' || this.state.body === '') {\n      return toast.error('Fill in all the fields!');\n    }\n\n    this.props.onSave({ ...this.state });\n\n    return this.setState({\n      title: '',\n      body: '',\n    });\n  };\n\n  render() {\n    const { title, body } = this.state;\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={title}\n          onChange={this.handleChange}\n          className={styles.title}\n          placeholder=\"Typing title here...\"\n        />\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={this.handleChange}\n          className={styles.body}\n          placeholder=\"Typing body here...\"\n        />\n        <Button type=\"submit\" label=\"Save Post\" />\n      </form>\n    );\n  }\n}\n\nPostEditor.defaultProps = {\n  title: '',\n  body: '',\n  onSave: () => null,\n};\n\nPostEditor.propTypes = {\n  title: PropTypes.string,\n  body: PropTypes.string,\n  onSave: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"postEditor_form__2CD7N\",\"title\":\"postEditor_title__2s-ee\",\"body\":\"postEditor_body__3gWk1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__2pFT2\"};"],"sourceRoot":""}