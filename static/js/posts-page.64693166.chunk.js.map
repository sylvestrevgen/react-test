{"version":3,"sources":["components/PostsList/postsList.module.css","components/PostsList/PostsListItem/postsListItem.module.css","components/PostsList/PostsListItem/PostsListItem.jsx","components/PostsList/PostsList.jsx","pages/PostsPage/PostsPage.jsx","pages/PostsPage/PostsPageContainer.js","components/Button/Button.jsx","redux/operations.js","redux/actions.js","components/PostEditor/PostEditor.jsx","components/PostEditor/postEditor.module.css","components/Button/button.module.css"],"names":["module","exports","PostsListItem","post","className","styles","title","body","defaultProps","PostsList","posts","onDeletePost","list","map","key","id","listItem","to","link","Button","label","customStyles","marginTop","onClick","connect","dispatch","deletePost","PostsPage","handleSavePost","onAddPost","props","onFetchPosts","this","isLoading","postsPage","PostEditor","onSave","LoadingSpinner","Component","state","selectors","fetchPosts","addPost","type","button","style","actionTypes","FETCH_POSTS_START","axios","get","then","response","data","FETCH_POSTS_SUCCESS","payload","catch","error","FETCH_POSTS_ERROR","fetchPostsError","fetchSinglePost","FETCH_SINGLE_POST_START","singlePost","FETCH_SINGLE_POST_SUCCESS","FETCH_SINGLE_POST_ERROR","fetchSinglePostError","DELETE_POST_START","delete","DELETE_POST_SUCCESS","deletePostSuccess","toast","success","DELETE_POST_ERROR","ADD_POST_START","ADD_POST_SUCCESS","addPostSuccess","ADD_POST_ERROR","addPostError","updatePost","UPDATE_POST_START","put","UPDATE_POST_SUCCESS","updatePostSuccess","UPDATE_POST_ERROR","updatePostError","addComment","commentBody","ADD_COMMENT_START","postId","comment","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","addCommentError","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","form","onSubmit","onChange","placeholder"],"mappings":"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","file":"static/js/posts-page.64693166.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"postsList_list__TIzv9\",\"listItem\":\"postsList_listItem__3yu5y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"postsListItem_title__2IS5l\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './postsListItem.module.css';\n\nconst PostsListItem = ({ post }) => (\n  <article className={styles.post}>\n    <h3 className={styles.title}>{post.title}</h3>\n    <p className={styles.body}>{post.body}</p>\n  </article>\n);\n\nPostsListItem.defaultProps = {\n  post: {},\n};\n\nPostsListItem.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  }),\n};\n\nexport default PostsListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport styles from './postsList.module.css';\nimport { deletePost } from '../../redux/operations';\nimport PostsListItem from './PostsListItem/PostsListItem';\nimport Button from '../Button/Button';\n\nconst PostsList = ({ posts, onDeletePost }) => {\n  return (\n    <ul className={styles.list}>\n      {posts.map(post => (\n        <li key={post.id} className={styles.listItem}>\n          <Link to={`/posts/${post.id}`} className={styles.link}>\n            <PostsListItem post={{ ...post }} />\n          </Link>\n          <Button\n            label=\"Delete post\"\n            customStyles={{ marginTop: '20px' }}\n            onClick={() => onDeletePost(post.id)}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nPostsList.defaultProps = {\n  posts: [],\n  onDeletePost: () => null,\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }).isRequired,\n  ),\n  onDeletePost: PropTypes.func,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onDeletePost: id => dispatch(deletePost(id)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(PostsList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './postsPage.module.css';\nimport PostEditor from '../../components/PostEditor/PostEditor';\nimport PostsList from '../../components/PostsList/PostsList';\nimport LoadingSpinner from '../../components/LoadingSpinner/LoadingSpinner';\n\nexport default class PostsPage extends Component {\n  componentDidMount() {\n    const { onFetchPosts } = this.props;\n\n    onFetchPosts();\n  }\n\n  handleSavePost = post => {\n    const { onAddPost } = this.props;\n\n    onAddPost(post);\n  };\n\n  render() {\n    const { posts, isLoading } = this.props;\n    return (\n      <section className={styles.postsPage}>\n        <PostEditor onSave={this.handleSavePost} />\n        <PostsList posts={posts} />\n        {isLoading && <LoadingSpinner />}\n      </section>\n    );\n  }\n}\n\nPostsPage.defaultProps = {\n  onFetchPosts: () => null,\n  onAddPost: () => null,\n  posts: [],\n  isLoading: false,\n};\n\nPostsPage.propTypes = {\n  onFetchPosts: PropTypes.func,\n  onAddPost: PropTypes.func,\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      comments: PropTypes.arrayOf(PropTypes.shape({})),\n    }),\n  ),\n  isLoading: PropTypes.bool,\n};\n","import { connect } from 'react-redux';\nimport * as selectors from '../../redux/selectors';\nimport { fetchPosts, addPost } from '../../redux/operations';\nimport PostsPage from './PostsPage';\n\nconst mapStateToProps = state => ({\n  posts: selectors.getPosts(state),\n  isLoading: selectors.isLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFetchPosts: () => dispatch(fetchPosts()),\n  onAddPost: post => dispatch(addPost(post)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostsPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './button.module.css';\n\nconst Button = ({ type, label, onClick, customStyles }) => (\n  <button\n    type={type}\n    onClick={onClick}\n    className={styles.button}\n    style={customStyles}\n  >\n    {label}\n  </button>\n);\n\nButton.defaultProps = {\n  label: '',\n  type: 'button',\n  customStyles: {},\n  onClick: () => null,\n};\n\nButton.propTypes = {\n  label: PropTypes.string,\n  type: PropTypes.string,\n  customStyles: PropTypes.shape({}),\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  fetchPostsStart,\n  fetchPostsSuccess,\n  fetchPostsError,\n  fetchSinglePostStart,\n  fetchSinglePostSuccess,\n  fetchSinglePostError,\n  deletePostStart,\n  deletePostSuccess,\n  deletePostError,\n  addPostStart,\n  addPostSuccess,\n  addPostError,\n  updatePostStart,\n  updatePostSuccess,\n  updatePostError,\n  addCommentStart,\n  addCommentSuccess,\n  addCommentError,\n} from './actions';\n\nexport const fetchPosts = () => dispatch => {\n  dispatch(fetchPostsStart());\n\n  axios\n    .get('https://bloggy-api.herokuapp.com/posts')\n    .then(response => dispatch(fetchPostsSuccess(response.data)))\n    .catch(error => dispatch(fetchPostsError(error)));\n};\n\nexport const fetchSinglePost = id => dispatch => {\n  dispatch(fetchSinglePostStart());\n\n  axios\n    .get(`https://bloggy-api.herokuapp.com/posts/${id}?_embed=comments`)\n    .then(response => dispatch(fetchSinglePostSuccess(response.data)))\n    .catch(error => dispatch(fetchSinglePostError(error)));\n};\n\nexport const deletePost = id => dispatch => {\n  dispatch(deletePostStart());\n\n  axios\n    .delete(`https://bloggy-api.herokuapp.com/posts/${id}`)\n    .then(() => {\n      dispatch(deletePostSuccess(id));\n      toast.success('Post deleted!');\n    })\n    .catch(error => dispatch(deletePostError(error)));\n};\n\nexport const addPost = post => dispatch => {\n  dispatch(addPostStart());\n\n  axios\n    .post('https://bloggy-api.herokuapp.com/posts', post)\n    .then(response => {\n      dispatch(addPostSuccess(response.data));\n      toast.success('Post added!');\n    })\n    .catch(error => dispatch(addPostError(error)));\n};\n\nexport const updatePost = (post, id) => dispatch => {\n  dispatch(updatePostStart());\n\n  axios\n    .put(`https://bloggy-api.herokuapp.com/posts/${id}`, post)\n    .then(response => {\n      dispatch(updatePostSuccess(response.data));\n      toast.success('Post updated!');\n    })\n    .catch(error => dispatch(updatePostError(error)));\n};\n\nexport const addComment = (id, commentBody) => dispatch => {\n  dispatch(addCommentStart());\n\n  axios\n    .post('https://bloggy-api.herokuapp.com/comments', {\n      postId: id,\n      body: commentBody,\n    })\n    .then(response => {\n      dispatch(addCommentSuccess(response.data));\n      toast.success('Comment added!');\n    })\n    .catch(error => dispatch(addCommentError(error)));\n};\n","import actionTypes from './actionTypes';\n\nexport const fetchPostsStart = () => ({\n  type: actionTypes.FETCH_POSTS_START,\n});\n\nexport const fetchPostsSuccess = posts => ({\n  type: actionTypes.FETCH_POSTS_SUCCESS,\n  payload: {\n    posts,\n  },\n});\n\nexport const fetchPostsError = error => ({\n  type: actionTypes.FETCH_POSTS_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const fetchSinglePostStart = () => ({\n  type: actionTypes.FETCH_SINGLE_POST_START,\n});\n\nexport const fetchSinglePostSuccess = singlePost => ({\n  type: actionTypes.FETCH_SINGLE_POST_SUCCESS,\n  payload: {\n    singlePost,\n  },\n});\n\nexport const fetchSinglePostError = error => ({\n  type: actionTypes.FETCH_SINGLE_POST_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const deletePostStart = () => ({\n  type: actionTypes.DELETE_POST_START,\n});\n\nexport const deletePostSuccess = id => ({\n  type: actionTypes.DELETE_POST_SUCCESS,\n  payload: {\n    id,\n  },\n});\n\nexport const deletePostError = () => ({\n  type: actionTypes.DELETE_POST_ERROR,\n});\n\nexport const addPostStart = () => ({\n  type: actionTypes.ADD_POST_START,\n});\n\nexport const addPostSuccess = post => ({\n  type: actionTypes.ADD_POST_SUCCESS,\n  payload: {\n    post,\n  },\n});\n\nexport const addPostError = error => ({\n  type: actionTypes.ADD_POST_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const updatePostStart = () => ({\n  type: actionTypes.UPDATE_POST_START,\n});\n\nexport const updatePostSuccess = post => ({\n  type: actionTypes.UPDATE_POST_SUCCESS,\n  payload: {\n    post,\n  },\n});\n\nexport const updatePostError = error => ({\n  type: actionTypes.UPDATE_POST_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const addCommentStart = () => ({\n  type: actionTypes.ADD_COMMENT_START,\n});\n\nexport const addCommentSuccess = comment => ({\n  type: actionTypes.ADD_COMMENT_SUCCESS,\n  payload: {\n    comment,\n  },\n});\n\nexport const addCommentError = error => ({\n  type: actionTypes.ADD_COMMENT_ERROR,\n  payload: {\n    error,\n  },\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport styles from './postEditor.module.css';\nimport Button from '../Button/Button';\n\nexport default class PostEditor extends Component {\n  state = {\n    title: this.props.title,\n    body: this.props.body,\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    if (this.state.title === '' || this.state.body === '') {\n      return toast.error('Fill in all the fields!');\n    }\n\n    this.props.onSave({ ...this.state });\n\n    return this.setState({\n      title: '',\n      body: '',\n    });\n  };\n\n  render() {\n    const { title, body } = this.state;\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={title}\n          onChange={this.handleChange}\n          className={styles.title}\n          placeholder=\"Typing title here...\"\n        />\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={this.handleChange}\n          className={styles.body}\n          placeholder=\"Typing body here...\"\n        />\n        <Button type=\"submit\" label=\"Save Post\" />\n      </form>\n    );\n  }\n}\n\nPostEditor.defaultProps = {\n  title: '',\n  body: '',\n  onSave: () => null,\n};\n\nPostEditor.propTypes = {\n  title: PropTypes.string,\n  body: PropTypes.string,\n  onSave: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"postEditor_form__2CD7N\",\"title\":\"postEditor_title__2s-ee\",\"body\":\"postEditor_body__3gWk1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__2pFT2\"};"],"sourceRoot":""}